package com.zkxs.supplychain;
/**
 * An example algorithm. It randomly picks one arm and then
 * pulls only that specific arm for the rest of time.
 * @author Michael Ripley (<a href="mailto:michael-ripley@utulsa.edu">michael-ripley@utulsa.edu</a>) Jan 27, 2014
 */
public class AlgorithmExampleArbitraryExploitation implements Algorithm
{
	/** The index of our favorite arm */
	int favoriteArmIndex;
	
	/** Has the first pull been performed? */
	boolean firstPull;
	
	ArmMemory fave;
	double lastMean;
	long id;
	
	/**
	 * Standard constructor
	 */
	public AlgorithmExampleArbitraryExploitation()
	{
		firstPull = true;
	}
	
	@Override
	public int getNextArm(AgentSupplier agent)
	{
		if (firstPull)
		{
			favoriteArmIndex = RandomProvider.rand.nextInt(agent.getAgentMemory().size());
			firstPull = false;
//			System.out.println("arb " + favoriteArmIndex + "," + agent.getAgentMemory().indexedList.get(favoriteArmIndex).getSupplier().isBestArm());
			fave = agent.getAgentMemory().indexedList.get(favoriteArmIndex);
			lastMean = fave.getSupplier().getMeanTime();
			id = agent.id;
		}
		
		assert agent.id == id;
		assert !firstPull;
		assert fave.getSupplier().getMeanTime() == lastMean;
		
		return ArmPullRequest.get(fave);
		//return new ArmPullRequest(favoriteArmIndex, false);
	}

	@Override
	public Algorithm duplicate()
	{
		return new AlgorithmExampleArbitraryExploitation();
	}

	@Override
	public boolean requiresInitialBudget()
	{
		return false;
	}	

}
